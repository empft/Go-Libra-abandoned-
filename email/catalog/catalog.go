// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package email

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en":      &dictionary{index: enIndex, data: enData},
		"ms":      &dictionary{index: msIndex, data: msData},
		"zh_Hans": &dictionary{index: zh_HansIndex, data: zh_HansData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"An Accessible Payment System":                                        0,
	"Here is the list of usernames associated with your email:":           4,
	"Hi %s, reset your password using the link below.":                    6,
	"Never log into your account through any links provided in an email.": 1,
	"Password Reset":                         7,
	"Username Reminder":                      5,
	"Verification Code for Invitation Email": 2,
	"Verification Code for Recovery Email":   3,
}

var enIndex = []uint32{ // 9 elements
	0x00000000, 0x0000001d, 0x00000061, 0x00000088,
	0x000000ad, 0x000000e7, 0x000000f9, 0x0000012d,
	0x0000013c,
} // Size: 60 bytes

const enData string = "" + // Size: 316 bytes
	"\x02An Accessible Payment System\x02Never log into your account through " +
	"any links provided in an email.\x02Verification Code for Invitation Emai" +
	"l\x02Verification Code for Recovery Email\x02Here is the list of usernam" +
	"es associated with your email:\x02Username Reminder\x02Hi %[1]s, reset y" +
	"our password using the link below.\x02Password Reset"

var msIndex = []uint32{ // 9 elements
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000,
} // Size: 60 bytes

const msData string = ""

var zh_HansIndex = []uint32{ // 9 elements
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000,
} // Size: 60 bytes

const zh_HansData string = ""

// Total table size 496 bytes (0KiB); checksum: BC95E64F
