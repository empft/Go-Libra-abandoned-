// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicClient is the client API for Public service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicClient interface {
	RequestInvitationCode(ctx context.Context, in *InvitationRequest, opts ...grpc.CallOption) (*Empty, error)
	IsUsernameTaken(ctx context.Context, in *User, opts ...grpc.CallOption) (*BoolValue, error)
	RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Empty, error)
	LoginAccount(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error)
	ForgetAccount(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*Empty, error)
}

type publicClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicClient(cc grpc.ClientConnInterface) PublicClient {
	return &publicClient{cc}
}

func (c *publicClient) RequestInvitationCode(ctx context.Context, in *InvitationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/public.Public/RequestInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) IsUsernameTaken(ctx context.Context, in *User, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, "/public.Public/IsUsernameTaken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/public.Public/RegisterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) LoginAccount(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/public.Public/LoginAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ForgetAccount(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/public.Public/ForgetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServer is the server API for Public service.
// All implementations must embed UnimplementedPublicServer
// for forward compatibility
type PublicServer interface {
	RequestInvitationCode(context.Context, *InvitationRequest) (*Empty, error)
	IsUsernameTaken(context.Context, *User) (*BoolValue, error)
	RegisterAccount(context.Context, *RegisterRequest) (*Empty, error)
	LoginAccount(context.Context, *LoginRequest) (*Empty, error)
	ForgetAccount(context.Context, *ForgetRequest) (*Empty, error)
	mustEmbedUnimplementedPublicServer()
}

// UnimplementedPublicServer must be embedded to have forward compatible implementations.
type UnimplementedPublicServer struct {
}

func (UnimplementedPublicServer) RequestInvitationCode(context.Context, *InvitationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestInvitationCode not implemented")
}
func (UnimplementedPublicServer) IsUsernameTaken(context.Context, *User) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUsernameTaken not implemented")
}
func (UnimplementedPublicServer) RegisterAccount(context.Context, *RegisterRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedPublicServer) LoginAccount(context.Context, *LoginRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAccount not implemented")
}
func (UnimplementedPublicServer) ForgetAccount(context.Context, *ForgetRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetAccount not implemented")
}
func (UnimplementedPublicServer) mustEmbedUnimplementedPublicServer() {}

// UnsafePublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServer will
// result in compilation errors.
type UnsafePublicServer interface {
	mustEmbedUnimplementedPublicServer()
}

func RegisterPublicServer(s grpc.ServiceRegistrar, srv PublicServer) {
	s.RegisterService(&Public_ServiceDesc, srv)
}

func _Public_RequestInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).RequestInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public.Public/RequestInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).RequestInvitationCode(ctx, req.(*InvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_IsUsernameTaken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).IsUsernameTaken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public.Public/IsUsernameTaken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).IsUsernameTaken(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public.Public/RegisterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).RegisterAccount(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_LoginAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).LoginAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public.Public/LoginAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).LoginAccount(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ForgetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ForgetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public.Public/ForgetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ForgetAccount(ctx, req.(*ForgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Public_ServiceDesc is the grpc.ServiceDesc for Public service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Public_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.Public",
	HandlerType: (*PublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestInvitationCode",
			Handler:    _Public_RequestInvitationCode_Handler,
		},
		{
			MethodName: "IsUsernameTaken",
			Handler:    _Public_IsUsernameTaken_Handler,
		},
		{
			MethodName: "RegisterAccount",
			Handler:    _Public_RegisterAccount_Handler,
		},
		{
			MethodName: "LoginAccount",
			Handler:    _Public_LoginAccount_Handler,
		},
		{
			MethodName: "ForgetAccount",
			Handler:    _Public_ForgetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.proto",
}
